// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -f backingimagedatasources.yml --schema=derived --docs -b --derive=Default --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use kube_derive::CustomResource;
    #[cfg(feature = "schemars")]
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use std::collections::BTreeMap;
    #[cfg(feature = "builder")]
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// BackingImageDataSourceSpec defines the desired state of the Longhorn backing image data source
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
#[cfg_attr(not(feature = "schemars"), kube(schema = "disabled"))]
#[kube(
    group = "longhorn.io",
    version = "v1beta2",
    kind = "BackingImageDataSource",
    plural = "backingimagedatasources"
)]
#[kube(namespaced)]
#[kube(status = "BackingImageDataSourceStatus")]
#[kube(derive = "Default")]
#[kube(derive = "PartialEq")]
pub struct BackingImageDataSourceSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub checksum: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskPath")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub disk_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskUUID")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub disk_uuid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileTransferred"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub file_transferred: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeID")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub node_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub parameters: Option<BTreeMap<String, String>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceType"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub source_type: Option<BackingImageDataSourceSourceType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub uuid: Option<String>,
}

/// BackingImageDataSourceSpec defines the desired state of the Longhorn backing image data source
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub enum BackingImageDataSourceSourceType {
    #[serde(rename = "download")]
    Download,
    #[serde(rename = "upload")]
    Upload,
    #[serde(rename = "export-from-volume")]
    ExportFromVolume,
    #[serde(rename = "restore")]
    Restore,
}

/// BackingImageDataSourceStatus defines the observed state of the Longhorn backing image data source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct BackingImageDataSourceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub checksum: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "currentState"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub current_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerID")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub owner_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub progress: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runningParameters"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub running_parameters: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageIP")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub storage_ip: Option<String>,
}
