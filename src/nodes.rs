// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -f nodes.yml --schema=derived --docs -b --derive=Default --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube_derive::CustomResource;
    #[cfg(feature = "schemars")]
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use std::collections::BTreeMap;
    #[cfg(feature = "builder")]
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// NodeSpec defines the desired state of the Longhorn node
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
#[cfg_attr(not(feature = "schemars"), kube(schema = "disabled"))]
#[kube(
    group = "longhorn.io",
    version = "v1beta2",
    kind = "Node",
    plural = "nodes"
)]
#[kube(namespaced)]
#[kube(status = "NodeStatus")]
#[kube(derive = "Default")]
#[kube(derive = "PartialEq")]
pub struct NodeSpec {
    /// Allow scheduling replicas on the node.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowScheduling"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub allow_scheduling: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub disks: Option<BTreeMap<String, NodeDisks>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "evictionRequested"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub eviction_requested: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceManagerCPURequest"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub instance_manager_cpu_request: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct NodeDisks {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowScheduling"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub allow_scheduling: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "diskDriver"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub disk_driver: Option<NodeDisksDiskDriver>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskType")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub disk_type: Option<NodeDisksDiskType>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "evictionRequested"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub eviction_requested: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub path: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageReserved"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub storage_reserved: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub enum NodeDisksDiskDriver {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "auto")]
    Auto,
    #[serde(rename = "aio")]
    Aio,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub enum NodeDisksDiskType {
    #[serde(rename = "filesystem")]
    Filesystem,
    #[serde(rename = "block")]
    Block,
}

/// NodeStatus defines the observed state of the Longhorn node
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct NodeStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoEvicting"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub auto_evicting: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub conditions: Option<Vec<Condition>>,
    /// The status of the disks on the node.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "diskStatus"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub disk_status: Option<BTreeMap<String, NodeStatusDiskStatus>>,
    /// The Region of the node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub region: Option<String>,
    /// The status of the snapshot integrity check.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotCheckStatus"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub snapshot_check_status: Option<NodeStatusSnapshotCheckStatus>,
    /// The Zone of the node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub zone: Option<String>,
}

/// The status of the disks on the node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct NodeStatusDiskStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub conditions: Option<Vec<Condition>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "diskDriver"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub disk_driver: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskName")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub disk_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskPath")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub disk_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskType")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub disk_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskUUID")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub disk_uuid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "filesystemType"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub filesystem_type: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceManagerName"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub instance_manager_name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scheduledReplica"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub scheduled_replica: Option<BTreeMap<String, i64>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageAvailable"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub storage_available: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageMaximum"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub storage_maximum: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageScheduled"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub storage_scheduled: Option<i64>,
}

/// The status of the snapshot integrity check.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct NodeStatusSnapshotCheckStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastPeriodicCheckedAt"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub last_periodic_checked_at: Option<String>,
}
