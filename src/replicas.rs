// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -f replicas.yml --schema=derived --docs -b
// kopium version: 0.16.2

use kube_derive::CustomResource;
#[cfg(feature = "schemars")]
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
#[cfg(feature = "builder")]
use typed_builder::TypedBuilder;

/// ReplicaSpec defines the desired state of the Longhorn replica
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq, Default)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
#[cfg_attr(not(feature = "schemars"), kube(schema = "disabled"))]
#[kube(
    group = "longhorn.io",
    version = "v1beta2",
    kind = "Replica",
    plural = "replicas"
)]
#[kube(namespaced)]
#[kube(status = "ReplicaStatus")]
pub struct ReplicaSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub active: Option<bool>,
    /// Deprecated: Replaced by field `dataEngine`.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "backendStoreDriver"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub backend_store_driver: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "backingImage"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub backing_image: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataDirectoryName"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub data_directory_name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataEngine"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub data_engine: Option<ReplicaDataEngine>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desireState"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub desire_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskID")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub disk_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskPath")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub disk_path: Option<String>,
    /// Deprecated: Replaced by field `image`.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engineImage"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub engine_image: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engineName"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub engine_name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "evictionRequested"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub eviction_requested: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failedAt")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub failed_at: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hardNodeAffinity"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub hard_node_affinity: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyAt")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub healthy_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub image: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logRequested"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub log_requested: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeID")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub node_id: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rebuildRetryCount"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub rebuild_retry_count: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "revisionCounterDisabled"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub revision_counter_disabled: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "salvageRequested"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub salvage_requested: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotMaxCount"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub snapshot_max_count: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotMaxSize"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub snapshot_max_size: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "unmapMarkDiskChainRemovedEnabled"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub unmap_mark_disk_chain_removed_enabled: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeName"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub volume_name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub volume_size: Option<String>,
}

/// ReplicaSpec defines the desired state of the Longhorn replica
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub enum ReplicaDataEngine {
    #[serde(rename = "v1")]
    V1,
    #[serde(rename = "v2")]
    V2,
}

/// ReplicaStatus defines the observed state of the Longhorn replica
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, Default)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct ReplicaStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub conditions: Option<Vec<ReplicaStatusConditions>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "currentImage"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub current_image: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "currentState"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub current_state: Option<String>,
    /// Deprecated: Replaced by field `spec.evictionRequested`.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "evictionRequested"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub eviction_requested: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceManagerName"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub instance_manager_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub ip: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logFetched"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub log_fetched: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerID")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub owner_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub port: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "salvageExecuted"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub salvage_executed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub started: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageIP")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub storage_ip: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, Default)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct ReplicaStatusConditions {
    /// Last time we probed the condition.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastProbeTime"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub last_probe_time: Option<String>,
    /// Last time the condition transitioned from one status to another.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastTransitionTime"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub last_transition_time: Option<String>,
    /// Human-readable message indicating details about last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub message: Option<String>,
    /// Unique, one-word, CamelCase reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub reason: Option<String>,
    /// Status is the status of the condition. Can be True, False, Unknown.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub status: Option<String>,
    /// Type is the type of the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub r#type: Option<String>,
}
