// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -f systembackups.yml --schema=derived --docs -b --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube_derive::CustomResource;
    #[cfg(feature = "schemars")]
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    #[cfg(feature = "builder")]
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// SystemBackupSpec defines the desired state of the Longhorn SystemBackup
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
#[cfg_attr(not(feature = "schemars"), kube(schema = "disabled"))]
#[kube(
    group = "longhorn.io",
    version = "v1beta2",
    kind = "SystemBackup",
    plural = "systembackups"
)]
#[kube(namespaced)]
#[kube(status = "SystemBackupStatus")]
#[kube(derive = "Default")]
#[kube(derive = "PartialEq")]
pub struct SystemBackupSpec {
    /// The create volume backup policy Can be "if-not-present", "always" or "disabled"
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeBackupPolicy"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub volume_backup_policy: Option<String>,
}

/// SystemBackupStatus defines the observed state of the Longhorn SystemBackup
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct SystemBackupStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub conditions: Option<Vec<Condition>>,
    /// The system backup creation time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub created_at: Option<String>,
    /// The saved Longhorn manager git commit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitCommit")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub git_commit: Option<String>,
    /// The last time that the system backup was synced into the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastSyncedAt"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub last_synced_at: Option<String>,
    /// The saved manager image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managerImage"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub manager_image: Option<String>,
    /// The node ID of the responsible controller to reconcile this SystemBackup.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerID")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub owner_id: Option<String>,
    /// The system backup state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub state: Option<String>,
    /// The saved Longhorn version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub version: Option<String>,
}
